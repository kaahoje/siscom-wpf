//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Erp.Suporte {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Licenca", Namespace="http://schemas.datacontract.org/2004/07/Erp.Suporte.DataContracts")]
    [System.SerializableAttribute()]
    public partial class Licenca : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BairroField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CepField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodigoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DocumentoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LogradouroField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NomeClienteField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NumeroField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Util.Enum.StatusLicenca StatusField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Bairro {
            get {
                return this.BairroField;
            }
            set {
                if ((object.ReferenceEquals(this.BairroField, value) != true)) {
                    this.BairroField = value;
                    this.RaisePropertyChanged("Bairro");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Cep {
            get {
                return this.CepField;
            }
            set {
                if ((object.ReferenceEquals(this.CepField, value) != true)) {
                    this.CepField = value;
                    this.RaisePropertyChanged("Cep");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Codigo {
            get {
                return this.CodigoField;
            }
            set {
                if ((object.ReferenceEquals(this.CodigoField, value) != true)) {
                    this.CodigoField = value;
                    this.RaisePropertyChanged("Codigo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Documento {
            get {
                return this.DocumentoField;
            }
            set {
                if ((object.ReferenceEquals(this.DocumentoField, value) != true)) {
                    this.DocumentoField = value;
                    this.RaisePropertyChanged("Documento");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Logradouro {
            get {
                return this.LogradouroField;
            }
            set {
                if ((object.ReferenceEquals(this.LogradouroField, value) != true)) {
                    this.LogradouroField = value;
                    this.RaisePropertyChanged("Logradouro");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NomeCliente {
            get {
                return this.NomeClienteField;
            }
            set {
                if ((object.ReferenceEquals(this.NomeClienteField, value) != true)) {
                    this.NomeClienteField = value;
                    this.RaisePropertyChanged("NomeCliente");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Numero {
            get {
                return this.NumeroField;
            }
            set {
                if ((object.ReferenceEquals(this.NumeroField, value) != true)) {
                    this.NumeroField = value;
                    this.RaisePropertyChanged("Numero");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Util.Enum.StatusLicenca Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Suporte.ISuporte")]
    public interface ISuporte {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISuporte/LogDataBase", ReplyAction="http://tempuri.org/ISuporte/LogDataBaseResponse")]
        void LogDataBase(string exception);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISuporte/LogDataBase", ReplyAction="http://tempuri.org/ISuporte/LogDataBaseResponse")]
        System.Threading.Tasks.Task LogDataBaseAsync(string exception);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISuporte/Log", ReplyAction="http://tempuri.org/ISuporte/LogResponse")]
        void Log(string exception);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISuporte/Log", ReplyAction="http://tempuri.org/ISuporte/LogResponse")]
        System.Threading.Tasks.Task LogAsync(string exception);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISuporte/LicenceValid", ReplyAction="http://tempuri.org/ISuporte/LicenceValidResponse")]
        bool LicenceValid(Erp.Suporte.Licenca licenca);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISuporte/LicenceValid", ReplyAction="http://tempuri.org/ISuporte/LicenceValidResponse")]
        System.Threading.Tasks.Task<bool> LicenceValidAsync(Erp.Suporte.Licenca licenca);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISuporte/RequestLicence", ReplyAction="http://tempuri.org/ISuporte/RequestLicenceResponse")]
        Erp.Suporte.Licenca RequestLicence(Erp.Suporte.Licenca licenca);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISuporte/RequestLicence", ReplyAction="http://tempuri.org/ISuporte/RequestLicenceResponse")]
        System.Threading.Tasks.Task<Erp.Suporte.Licenca> RequestLicenceAsync(Erp.Suporte.Licenca licenca);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISuporteChannel : Erp.Suporte.ISuporte, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SuporteClient : System.ServiceModel.ClientBase<Erp.Suporte.ISuporte>, Erp.Suporte.ISuporte {
        
        public SuporteClient() {
        }
        
        public SuporteClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SuporteClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SuporteClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SuporteClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void LogDataBase(string exception) {
            base.Channel.LogDataBase(exception);
        }
        
        public System.Threading.Tasks.Task LogDataBaseAsync(string exception) {
            return base.Channel.LogDataBaseAsync(exception);
        }
        
        public void Log(string exception) {
            base.Channel.Log(exception);
        }
        
        public System.Threading.Tasks.Task LogAsync(string exception) {
            return base.Channel.LogAsync(exception);
        }
        
        public bool LicenceValid(Erp.Suporte.Licenca licenca) {
            return base.Channel.LicenceValid(licenca);
        }
        
        public System.Threading.Tasks.Task<bool> LicenceValidAsync(Erp.Suporte.Licenca licenca) {
            return base.Channel.LicenceValidAsync(licenca);
        }
        
        public Erp.Suporte.Licenca RequestLicence(Erp.Suporte.Licenca licenca) {
            return base.Channel.RequestLicence(licenca);
        }
        
        public System.Threading.Tasks.Task<Erp.Suporte.Licenca> RequestLicenceAsync(Erp.Suporte.Licenca licenca) {
            return base.Channel.RequestLicenceAsync(licenca);
        }
    }
}
